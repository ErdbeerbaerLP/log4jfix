buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
plugins{

    id "com.matthewprenger.cursegradle" version "1.4.0"
}
apply plugin: 'net.minecraftforge.gradle'

group = 'de.erdbeerbaerlp'
version = '1.0.0'
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

    archivesBaseName = 'log4jfix'


minecraft {
    mappings channel: 'snapshot', version: '20190719-1.14.3'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                log4jfix {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                log4jfix {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'log4jfix', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                log4jfix {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {

}

dependencies {
    minecraft 'net.minecraftforge:forge:1.14.4-28.2.23'
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    classifier = "1.14"
    manifest {
        attributes([
                "Specification-Title"     : "log4jfix",
                //"Specification-Vendor": "log4jfix authors",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                //"Implementation-Vendor": "log4jfix authors",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')


//Curseforge publishing
curseforge {
    if (project.hasProperty('curseforge.apikey')) { // $GRADLE_USER_HOME/gradle.properties
        apiKey = getProperty("curseforge.apikey")
        project {
            id = '554869'
            changelog = project.changelog
            releaseType = "release"
            addGameVersion '1.14.4'
            addGameVersion '1.14.3'
            addGameVersion '1.14.2'
            addGameVersion '1.14.1'
            addGameVersion '1.14'
            mainArtifact(jar) {
                displayName = "Log4J RCE Fix $version (MC 1.15)"
            }
            //relations {
            //}
        }
    }
}